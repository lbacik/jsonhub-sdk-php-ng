<?php
/**
 * DefinitionApi
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * JsonHub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefinitionApi Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefinitionApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiDefinitionsGetCollection' => [
            'application/json',
        ],
        'apiDefinitionsIdDelete' => [
            'application/json',
        ],
        'apiDefinitionsIdGet' => [
            'application/json',
        ],
        'apiDefinitionsIdPatch' => [
            'application/merge-patch+json',
        ],
        'apiDefinitionsPost' => [
            'application/ld+json',
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation apiDefinitionsGetCollection
     *
     * Retrieves the collection of definition resources.
     *
     * @param  string|null $qid Filter by slug/id (partial match) (optional)
     * @param  bool|null $is_owned_by_me Show only definitions owned by the current user (optional)
     * @param  int|null $page The collection page number (optional, default to 1)
     * @param  int|null $limit The number of items per page (optional, default to 10)
     * @param  string[]|null $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string|null $parent_entity Filter by parentEntity (uuid) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsGetCollection'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response
     */
    public function apiDefinitionsGetCollection(
        ?string $qid = null,
        ?bool $is_owned_by_me = null,
        ?int $page = 1,
        ?int $limit = 10,
        ?array $properties = null,
        ?string $parent_entity = null,
        string $contentType = self::contentTypes['apiDefinitionsGetCollection'][0]
    ): \OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response
    {
        list($response) = $this->apiDefinitionsGetCollectionWithHttpInfo($qid, $is_owned_by_me, $page, $limit, $properties, $parent_entity, $contentType);
        return $response;
    }

    /**
     * Operation apiDefinitionsGetCollectionWithHttpInfo
     *
     * Retrieves the collection of definition resources.
     *
     * @param  string|null $qid Filter by slug/id (partial match) (optional)
     * @param  bool|null $is_owned_by_me Show only definitions owned by the current user (optional)
     * @param  int|null $page The collection page number (optional, default to 1)
     * @param  int|null $limit The number of items per page (optional, default to 10)
     * @param  string[]|null $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string|null $parent_entity Filter by parentEntity (uuid) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsGetCollection'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDefinitionsGetCollectionWithHttpInfo(
        ?string $qid = null,
        ?bool $is_owned_by_me = null,
        ?int $page = 1,
        ?int $limit = 10,
        ?array $properties = null,
        ?string $parent_entity = null,
        string $contentType = self::contentTypes['apiDefinitionsGetCollection'][0]
    ): array
    {
        $request = $this->apiDefinitionsGetCollectionRequest($qid, $is_owned_by_me, $page, $limit, $properties, $parent_entity, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDefinitionsGetCollectionAsync
     *
     * Retrieves the collection of definition resources.
     *
     * @param  string|null $qid Filter by slug/id (partial match) (optional)
     * @param  bool|null $is_owned_by_me Show only definitions owned by the current user (optional)
     * @param  int|null $page The collection page number (optional, default to 1)
     * @param  int|null $limit The number of items per page (optional, default to 10)
     * @param  string[]|null $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string|null $parent_entity Filter by parentEntity (uuid) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsGetCollection'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsGetCollectionAsync(
        ?string $qid = null,
        ?bool $is_owned_by_me = null,
        ?int $page = 1,
        ?int $limit = 10,
        ?array $properties = null,
        ?string $parent_entity = null,
        string $contentType = self::contentTypes['apiDefinitionsGetCollection'][0]
    ): PromiseInterface
    {
        return $this->apiDefinitionsGetCollectionAsyncWithHttpInfo($qid, $is_owned_by_me, $page, $limit, $properties, $parent_entity, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDefinitionsGetCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of definition resources.
     *
     * @param  string|null $qid Filter by slug/id (partial match) (optional)
     * @param  bool|null $is_owned_by_me Show only definitions owned by the current user (optional)
     * @param  int|null $page The collection page number (optional, default to 1)
     * @param  int|null $limit The number of items per page (optional, default to 10)
     * @param  string[]|null $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string|null $parent_entity Filter by parentEntity (uuid) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsGetCollection'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsGetCollectionAsyncWithHttpInfo(
        ?string $qid = null,
        ?bool $is_owned_by_me = null,
        ?int $page = 1,
        ?int $limit = 10,
        ?array $properties = null,
        ?string $parent_entity = null,
        string $contentType = self::contentTypes['apiDefinitionsGetCollection'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\ApiDefinitionsGetCollection200Response';
        $request = $this->apiDefinitionsGetCollectionRequest($qid, $is_owned_by_me, $page, $limit, $properties, $parent_entity, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDefinitionsGetCollection'
     *
     * @param  string|null $qid Filter by slug/id (partial match) (optional)
     * @param  bool|null $is_owned_by_me Show only definitions owned by the current user (optional)
     * @param  int|null $page The collection page number (optional, default to 1)
     * @param  int|null $limit The number of items per page (optional, default to 10)
     * @param  string[]|null $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string|null $parent_entity Filter by parentEntity (uuid) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsGetCollection'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDefinitionsGetCollectionRequest(
        ?string $qid = null,
        ?bool $is_owned_by_me = null,
        ?int $page = 1,
        ?int $limit = 10,
        ?array $properties = null,
        ?string $parent_entity = null,
        string $contentType = self::contentTypes['apiDefinitionsGetCollection'][0]
    ): Request
    {




        if ($limit !== null && $limit < 0) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling DefinitionApi.apiDefinitionsGetCollection, must be bigger than or equal to 0.');
        }
        



        $resourcePath = '/api/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $qid,
            'qid', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_owned_by_me,
            'isOwnedByMe', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $properties,
            'properties[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_entity,
            'parentEntity', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDefinitionsIdDelete
     *
     * Removes the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function apiDefinitionsIdDelete(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdDelete'][0]
    ): void
    {
        $this->apiDefinitionsIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation apiDefinitionsIdDeleteWithHttpInfo
     *
     * Removes the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdDelete'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDefinitionsIdDeleteWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdDelete'][0]
    ): array
    {
        $request = $this->apiDefinitionsIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiDefinitionsIdDeleteAsync
     *
     * Removes the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsIdDeleteAsync(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdDelete'][0]
    ): PromiseInterface
    {
        return $this->apiDefinitionsIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDefinitionsIdDeleteAsyncWithHttpInfo
     *
     * Removes the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsIdDeleteAsyncWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdDelete'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->apiDefinitionsIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDefinitionsIdDelete'
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdDelete'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDefinitionsIdDeleteRequest(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdDelete'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling apiDefinitionsIdDelete'
            );
        }


        $resourcePath = '/api/definitions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDefinitionsIdGet
     *
     * Retrieves a definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead
     */
    public function apiDefinitionsIdGet(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdGet'][0]
    ): \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead
    {
        list($response) = $this->apiDefinitionsIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation apiDefinitionsIdGetWithHttpInfo
     *
     * Retrieves a definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDefinitionsIdGetWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdGet'][0]
    ): array
    {
        $request = $this->apiDefinitionsIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDefinitionsIdGetAsync
     *
     * Retrieves a definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsIdGetAsync(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdGet'][0]
    ): PromiseInterface
    {
        return $this->apiDefinitionsIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDefinitionsIdGetAsyncWithHttpInfo
     *
     * Retrieves a definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsIdGetAsyncWithHttpInfo(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdGet'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead';
        $request = $this->apiDefinitionsIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDefinitionsIdGet'
     *
     * @param  string $id definition identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDefinitionsIdGetRequest(
        string $id,
        string $contentType = self::contentTypes['apiDefinitionsIdGet'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling apiDefinitionsIdGet'
            );
        }


        $resourcePath = '/api/definitions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDefinitionsIdPatch
     *
     * Updates the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write The updated definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead
     */
    public function apiDefinitionsIdPatch(
        string $id,
        \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsIdPatch'][0]
    ): \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead
    {
        list($response) = $this->apiDefinitionsIdPatchWithHttpInfo($id, $definition_definition_write, $contentType);
        return $response;
    }

    /**
     * Operation apiDefinitionsIdPatchWithHttpInfo
     *
     * Updates the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write The updated definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdPatch'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDefinitionsIdPatchWithHttpInfo(
        string $id,
        \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsIdPatch'][0]
    ): array
    {
        $request = $this->apiDefinitionsIdPatchRequest($id, $definition_definition_write, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDefinitionsIdPatchAsync
     *
     * Updates the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write The updated definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsIdPatchAsync(
        string $id,
        \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsIdPatch'][0]
    ): PromiseInterface
    {
        return $this->apiDefinitionsIdPatchAsyncWithHttpInfo($id, $definition_definition_write, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDefinitionsIdPatchAsyncWithHttpInfo
     *
     * Updates the definition resource.
     *
     * @param  string $id definition identifier (required)
     * @param  \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write The updated definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsIdPatchAsyncWithHttpInfo(
        string $id,
        \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsIdPatch'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead';
        $request = $this->apiDefinitionsIdPatchRequest($id, $definition_definition_write, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDefinitionsIdPatch'
     *
     * @param  string $id definition identifier (required)
     * @param  \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write The updated definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsIdPatch'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDefinitionsIdPatchRequest(
        string $id,
        \OpenAPI\Client\Model\DefinitionDefinitionWrite $definition_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsIdPatch'][0]
    ): Request
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $id when calling apiDefinitionsIdPatch'
            );
        }

        // verify the required parameter 'definition_definition_write' is set
        if ($definition_definition_write === null || (is_array($definition_definition_write) && count($definition_definition_write) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $definition_definition_write when calling apiDefinitionsIdPatch'
            );
        }


        $resourcePath = '/api/definitions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($definition_definition_write)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($definition_definition_write));
            } else {
                $httpBody = $definition_definition_write;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiDefinitionsPost
     *
     * Creates a definition resource.
     *
     * @param  \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write The new definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead
     */
    public function apiDefinitionsPost(
        \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsPost'][0]
    ): \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead
    {
        list($response) = $this->apiDefinitionsPostWithHttpInfo($definition_jsonld_definition_write, $contentType);
        return $response;
    }

    /**
     * Operation apiDefinitionsPostWithHttpInfo
     *
     * Creates a definition resource.
     *
     * @param  \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write The new definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefinitionJsonldDefinitionRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiDefinitionsPostWithHttpInfo(
        \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsPost'][0]
    ): array
    {
        $request = $this->apiDefinitionsPostRequest($definition_jsonld_definition_write, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if (in_array('\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiDefinitionsPostAsync
     *
     * Creates a definition resource.
     *
     * @param  \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write The new definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsPostAsync(
        \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsPost'][0]
    ): PromiseInterface
    {
        return $this->apiDefinitionsPostAsyncWithHttpInfo($definition_jsonld_definition_write, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiDefinitionsPostAsyncWithHttpInfo
     *
     * Creates a definition resource.
     *
     * @param  \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write The new definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiDefinitionsPostAsyncWithHttpInfo(
        \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsPost'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\DefinitionJsonldDefinitionRead';
        $request = $this->apiDefinitionsPostRequest($definition_jsonld_definition_write, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiDefinitionsPost'
     *
     * @param  \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write The new definition resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiDefinitionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiDefinitionsPostRequest(
        \OpenAPI\Client\Model\DefinitionJsonldDefinitionWrite $definition_jsonld_definition_write,
        string $contentType = self::contentTypes['apiDefinitionsPost'][0]
    ): Request
    {

        // verify the required parameter 'definition_jsonld_definition_write' is set
        if ($definition_jsonld_definition_write === null || (is_array($definition_jsonld_definition_write) && count($definition_jsonld_definition_write) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $definition_jsonld_definition_write when calling apiDefinitionsPost'
            );
        }


        $resourcePath = '/api/definitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($definition_jsonld_definition_write)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($definition_jsonld_definition_write));
            } else {
                $httpBody = $definition_jsonld_definition_write;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

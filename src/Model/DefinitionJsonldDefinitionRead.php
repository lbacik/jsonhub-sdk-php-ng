<?php
/**
 * DefinitionJsonldDefinitionRead
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * JsonHub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefinitionJsonldDefinitionRead Class Doc Comment
 *
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class DefinitionJsonldDefinitionRead implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'definition.jsonld-definition.read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'at_context' => '\OpenAPI\Client\Model\DefinitionJsonldDefinitionReadContext',
        'at_id' => 'string',
        'at_type' => 'string',
        'id' => 'string',
        'slug' => 'string',
        'json_schema' => 'object',
        'parent_entity' => '\OpenAPI\Client\Model\EntityJsonldDefinitionRead',
        'is_owned_by_current_user' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'at_context' => null,
        'at_id' => null,
        'at_type' => null,
        'id' => 'uuid',
        'slug' => null,
        'json_schema' => 'json-schema',
        'parent_entity' => null,
        'is_owned_by_current_user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'at_context' => false,
        'at_id' => false,
        'at_type' => false,
        'id' => true,
        'slug' => true,
        'json_schema' => false,
        'parent_entity' => true,
        'is_owned_by_current_user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'at_context' => '@context',
        'at_id' => '@id',
        'at_type' => '@type',
        'id' => 'id',
        'slug' => 'slug',
        'json_schema' => 'jsonSchema',
        'parent_entity' => 'parentEntity',
        'is_owned_by_current_user' => 'isOwnedByCurrentUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'at_context' => 'setAtContext',
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'id' => 'setId',
        'slug' => 'setSlug',
        'json_schema' => 'setJsonSchema',
        'parent_entity' => 'setParentEntity',
        'is_owned_by_current_user' => 'setIsOwnedByCurrentUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'at_context' => 'getAtContext',
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'id' => 'getId',
        'slug' => 'getSlug',
        'json_schema' => 'getJsonSchema',
        'parent_entity' => 'getParentEntity',
        'is_owned_by_current_user' => 'getIsOwnedByCurrentUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('json_schema', $data ?? [], null);
        $this->setIfExists('parent_entity', $data ?? [], null);
        $this->setIfExists('is_owned_by_current_user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['json_schema'] === null) {
            $invalidProperties[] = "'json_schema' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_context
     *
     * @return \OpenAPI\Client\Model\DefinitionJsonldDefinitionReadContext|null
     */
    public function getAtContext(): ?\OpenAPI\Client\Model\DefinitionJsonldDefinitionReadContext
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param \OpenAPI\Client\Model\DefinitionJsonldDefinitionReadContext|null $at_context at_context
     *
     * @return $this
     */
    public function setAtContext(?\OpenAPI\Client\Model\DefinitionJsonldDefinitionReadContext $at_context): static
    {
        if (is_null($at_context)) {
            throw new InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId(): ?string
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return $this
     */
    public function setAtId(?string $at_id): static
    {
        if (is_null($at_id)) {
            throw new InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType(): ?string
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return $this
     */
    public function setAtType(?string $at_type): static
    {
        if (is_null($at_type)) {
            throw new InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug(): ?string
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return $this
     */
    public function setSlug(?string $slug): static
    {
        if (is_null($slug)) {
            array_push($this->openAPINullablesSetToNull, 'slug');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('slug', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets json_schema
     *
     * @return object
     */
    public function getJsonSchema(): object
    {
        return $this->container['json_schema'];
    }

    /**
     * Sets json_schema
     *
     * @param object $json_schema json_schema
     *
     * @return $this
     */
    public function setJsonSchema(object $json_schema): static
    {
        if (is_null($json_schema)) {
            throw new InvalidArgumentException('non-nullable json_schema cannot be null');
        }
        $this->container['json_schema'] = $json_schema;

        return $this;
    }

    /**
     * Gets parent_entity
     *
     * @return \OpenAPI\Client\Model\EntityJsonldDefinitionRead|null
     */
    public function getParentEntity(): ?\OpenAPI\Client\Model\EntityJsonldDefinitionRead
    {
        return $this->container['parent_entity'];
    }

    /**
     * Sets parent_entity
     *
     * @param \OpenAPI\Client\Model\EntityJsonldDefinitionRead|null $parent_entity parent_entity
     *
     * @return $this
     */
    public function setParentEntity(?\OpenAPI\Client\Model\EntityJsonldDefinitionRead $parent_entity): static
    {
        if (is_null($parent_entity)) {
            array_push($this->openAPINullablesSetToNull, 'parent_entity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_entity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_entity'] = $parent_entity;

        return $this;
    }

    /**
     * Gets is_owned_by_current_user
     *
     * @return bool|null
     */
    public function getIsOwnedByCurrentUser(): ?bool
    {
        return $this->container['is_owned_by_current_user'];
    }

    /**
     * Sets is_owned_by_current_user
     *
     * @param bool|null $is_owned_by_current_user is_owned_by_current_user
     *
     * @return $this
     */
    public function setIsOwnedByCurrentUser(?bool $is_owned_by_current_user): static
    {
        if (is_null($is_owned_by_current_user)) {
            throw new InvalidArgumentException('non-nullable is_owned_by_current_user cannot be null');
        }
        $this->container['is_owned_by_current_user'] = $is_owned_by_current_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


